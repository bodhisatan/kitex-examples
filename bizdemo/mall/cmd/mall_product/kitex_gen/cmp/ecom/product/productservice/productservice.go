// Code generated by Kitex v0.2.1. DO NOT EDIT.

package productservice

import (
	"context"
	"github.com/cloudwego/kitex-examples/bizdemo/mall/cmd/mall_product/kitex_gen/cmp/ecom/product"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return productServiceServiceInfo
}

var productServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ProductService"
	handlerType := (*product.ProductService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddBrand":          kitex.NewMethodInfo(addBrandHandler, newProductServiceAddBrandArgs, newProductServiceAddBrandResult, false),
		"UpdateBrand":       kitex.NewMethodInfo(updateBrandHandler, newProductServiceUpdateBrandArgs, newProductServiceUpdateBrandResult, false),
		"DeleteBrand":       kitex.NewMethodInfo(deleteBrandHandler, newProductServiceDeleteBrandArgs, newProductServiceDeleteBrandResult, false),
		"GetBrandsByShopId": kitex.NewMethodInfo(getBrandsByShopIdHandler, newProductServiceGetBrandsByShopIdArgs, newProductServiceGetBrandsByShopIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.2.1",
		Extra:           extra,
	}
	return svcInfo
}

func addBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceAddBrandArgs)
	realResult := result.(*product.ProductServiceAddBrandResult)
	success, err := handler.(product.ProductService).AddBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceAddBrandArgs() interface{} {
	return product.NewProductServiceAddBrandArgs()
}

func newProductServiceAddBrandResult() interface{} {
	return product.NewProductServiceAddBrandResult()
}

func updateBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdateBrandArgs)
	realResult := result.(*product.ProductServiceUpdateBrandResult)
	success, err := handler.(product.ProductService).UpdateBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdateBrandArgs() interface{} {
	return product.NewProductServiceUpdateBrandArgs()
}

func newProductServiceUpdateBrandResult() interface{} {
	return product.NewProductServiceUpdateBrandResult()
}

func deleteBrandHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceDeleteBrandArgs)
	realResult := result.(*product.ProductServiceDeleteBrandResult)
	success, err := handler.(product.ProductService).DeleteBrand(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceDeleteBrandArgs() interface{} {
	return product.NewProductServiceDeleteBrandArgs()
}

func newProductServiceDeleteBrandResult() interface{} {
	return product.NewProductServiceDeleteBrandResult()
}

func getBrandsByShopIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetBrandsByShopIdArgs)
	realResult := result.(*product.ProductServiceGetBrandsByShopIdResult)
	success, err := handler.(product.ProductService).GetBrandsByShopId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetBrandsByShopIdArgs() interface{} {
	return product.NewProductServiceGetBrandsByShopIdArgs()
}

func newProductServiceGetBrandsByShopIdResult() interface{} {
	return product.NewProductServiceGetBrandsByShopIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddBrand(ctx context.Context, req *product.AddBrandReq) (r *product.AddBrandResp, err error) {
	var _args product.ProductServiceAddBrandArgs
	_args.Req = req
	var _result product.ProductServiceAddBrandResult
	if err = p.c.Call(ctx, "AddBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBrand(ctx context.Context, req *product.UpdateBrandReq) (r *product.UpdateBrandResp, err error) {
	var _args product.ProductServiceUpdateBrandArgs
	_args.Req = req
	var _result product.ProductServiceUpdateBrandResult
	if err = p.c.Call(ctx, "UpdateBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBrand(ctx context.Context, req *product.DeleteBrandReq) (r *product.DeleteBrandResp, err error) {
	var _args product.ProductServiceDeleteBrandArgs
	_args.Req = req
	var _result product.ProductServiceDeleteBrandResult
	if err = p.c.Call(ctx, "DeleteBrand", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBrandsByShopId(ctx context.Context, req *product.GetBrandsByShopIdReq) (r *product.GetBrandsByShopIdResp, err error) {
	var _args product.ProductServiceGetBrandsByShopIdArgs
	_args.Req = req
	var _result product.ProductServiceGetBrandsByShopIdResult
	if err = p.c.Call(ctx, "GetBrandsByShopId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
