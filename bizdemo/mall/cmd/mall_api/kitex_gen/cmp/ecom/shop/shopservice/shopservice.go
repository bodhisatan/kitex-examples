// Code generated by Kitex v0.2.1. DO NOT EDIT.

package shopservice

import (
	"context"
	"github.com/cloudwego/kitex-examples/bizdemo/mall/cmd/mall_api/kitex_gen/cmp/ecom/shop"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return shopServiceServiceInfo
}

var shopServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ShopService"
	handlerType := (*shop.ShopService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SettleShop":        kitex.NewMethodInfo(settleShopHandler, newShopServiceSettleShopArgs, newShopServiceSettleShopResult, false),
		"GetShopIdByUserId": kitex.NewMethodInfo(getShopIdByUserIdHandler, newShopServiceGetShopIdByUserIdArgs, newShopServiceGetShopIdByUserIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "shop",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.2.1",
		Extra:           extra,
	}
	return svcInfo
}

func settleShopHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*shop.ShopServiceSettleShopArgs)
	realResult := result.(*shop.ShopServiceSettleShopResult)
	success, err := handler.(shop.ShopService).SettleShop(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newShopServiceSettleShopArgs() interface{} {
	return shop.NewShopServiceSettleShopArgs()
}

func newShopServiceSettleShopResult() interface{} {
	return shop.NewShopServiceSettleShopResult()
}

func getShopIdByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*shop.ShopServiceGetShopIdByUserIdArgs)
	realResult := result.(*shop.ShopServiceGetShopIdByUserIdResult)
	success, err := handler.(shop.ShopService).GetShopIdByUserId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newShopServiceGetShopIdByUserIdArgs() interface{} {
	return shop.NewShopServiceGetShopIdByUserIdArgs()
}

func newShopServiceGetShopIdByUserIdResult() interface{} {
	return shop.NewShopServiceGetShopIdByUserIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SettleShop(ctx context.Context, req *shop.SettleShopReq) (r *shop.SettleShopResp, err error) {
	var _args shop.ShopServiceSettleShopArgs
	_args.Req = req
	var _result shop.ShopServiceSettleShopResult
	if err = p.c.Call(ctx, "SettleShop", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetShopIdByUserId(ctx context.Context, req *shop.GetShopIdByUserIdReq) (r *shop.GetShopIdByUserIdResp, err error) {
	var _args shop.ShopServiceGetShopIdByUserIdArgs
	_args.Req = req
	var _result shop.ShopServiceGetShopIdByUserIdResult
	if err = p.c.Call(ctx, "GetShopIdByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
